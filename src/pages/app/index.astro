---
import { connect } from "../../util/database";
import AppLayout from "../../layouts/AppLayout.astro";
import ErrorOverlay from "../../components/ErrorOverlay.astro";
import FinishedOverlay from "../../components/FinishedOverlay.astro";
let Component = Fragment;
let ComponentProps = {};
const err = (tit, des) => {
    Component = ErrorOverlay;
    ComponentProps = { err: tit, description: des };
};

const { auth, getLessons, end } = connect();

if (
    !Astro.cookies.has("token") ||
    !(await auth(Astro.cookies.get("token").value)).success
) {
    end();
    return Astro.redirect("/me/auth/login");
}

const group = Astro.url.searchParams.get("g");
const index = Astro.url.searchParams.has("i")
    ? parseInt(Astro.url.searchParams.get("i"))
    : 0;

let lesson = {
    czech: "",
    polish: "",
    group: "",
    id: "",
    explanation: "",
    type: "",
};

let firstImg: any;
let nextImgUrl: any = "";

if (!Astro.url.searchParams.has("g")) {
    err(
        "Neplatná skupina",
        "Parametr 'g' musí být specifikován, aby mohla být spuštěna aplikace",
    );
} else if (
    Astro.url.searchParams.has("etitle") &&
    Astro.url.searchParams.has("edescription")
) {
    err(
        Astro.url.searchParams.get("etitle"),
        Astro.url.searchParams.get("edescription"),
    );
} else {
    let res = await getLessons(group);
    end();

    if (!res.success || !res.lessons.length) {
        err("Cvičení neexistuje", "Skupina cvičení neexistuje :(");
    } else {
        const lessons = res.lessons;
        const l = lessons[index];

        if (index + 1 < lessons.length) {
            // Prefetch image to load it faster
            const next = lessons[index + 1];

            if (next) {
                nextImgUrl =
                    "/api/v2/image?q=" +
                    encodeURI(
                        next.czech.includes(";")
                            ? next.czech.split(";")[0]
                            : next.czech,
                    );
            }
        }

        if (!l) {
            Component = FinishedOverlay;
            ComponentProps = {
                title: lessons[0].group,
                description: "Gratulujeme!",
            };
        } else {
            lesson = l;
            firstImg =
                "/api/v2/image?q=" +
                encodeURI(
                    lesson.czech.includes(";")
                        ? lesson.czech.split(";")[0]
                        : lesson.czech,
                );
        }
    }
}

function shuffle(array) {
    let currentIndex = array.length,
        randomIndex;

    // While there remain elements to shuffle.
    while (currentIndex > 0) {
        // Pick a remaining element.
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex--;

        // And swap it with the current element.
        [array[currentIndex], array[randomIndex]] = [
            array[randomIndex],
            array[currentIndex],
        ];
    }

    return array;
}

const nextLink = "?g=" + group + "&i=" + (index + 1);
---

<AppLayout>
    <Component {...ComponentProps} />
    <div
        id="data"
        data-group={lesson.group}
        data-id={lesson.id}
        data-type={lesson.type}
        data-polish={lesson.polish}
        data-next-image={nextImgUrl}
    >
    </div>

    <main transition:animate="fade">
        <div id="input">
            {
                lesson.type == "1" ? (
                    <div class="segment">
                        <h2>Přeložte slovo</h2>
                        <div class="translate">
                            <span class="floating-segment">{lesson.czech}</span>

                            <input
                                type="text"
                                id="answer"
                                class="floating-segment"
                                lang="pl"
                            />
                        </div>
                        <div class="imageContainer">
                            <img
                                src={firstImg}
                                aria-hidden="true"
                                loading="eager"
                            />
                        </div>
                    </div>
                ) : lesson.type == "2" ? (
                    <div class="segment">
                        <h2>Přiřaďte správný překlad ke slovům</h2>
                        <p>Využijte přetahování</p>
                        <div class="flex">
                            <div class="left">
                                {lesson.type == "2"
                                    ? lesson.czech.split(";").map((t) => (
                                          <div data-czech={t}>
                                              {t}:{" "}
                                              <span
                                                  class="answerbox"
                                                  id={encodeURIComponent(
                                                      "c" + t,
                                                  )}
                                              />
                                          </div>
                                      ))
                                    : undefined}
                            </div>
                            <div class="right" id="elementsForFree">
                                {lesson.type == "2"
                                    ? shuffle(lesson.polish.split(";")).map(
                                          (t) => (
                                              <div
                                                  class="floating-segment drag"
                                                  id={encodeURIComponent(
                                                      "p" + t,
                                                  )}
                                              >
                                                  {t}
                                              </div>
                                          ),
                                      )
                                    : undefined}
                            </div>
                            <div>
                                <input
                                    type="button"
                                    value="✔"
                                    class="submit"
                                    title="Zkontrolovat"
                                />
                            </div>
                        </div>
                        <div class="imageContainer">
                            <img
                                src={firstImg}
                                aria-hidden="true"
                                loading="eager"
                            />
                        </div>
                    </div>
                ) : (
                    "Tento typ lekce neexistuje, ale fakt nevím jak vidíte tenhle text."
                )
            }
        </div>
        <input type="button" value="Nevím" class="help background" />
    </main>

    <footer>
        <div class="correct" hidden>
            <h3>Správně</h3>
            <p class="explanation">{lesson.explanation}</p>
            <a role="button" title="další úloha" class="next" href={nextLink}
                >➡</a
            >
        </div>

        <div class="incorrect" hidden>
            <h3>Špatně</h3>
            <p>Zkuste to znovu, nebo se nechte podat</p>
            <a
                role="button"
                title="nechat se podat"
                class="nopeidk"
                href="javascript:void(0)">?</a
            >
        </div>

        <div class="idk" hidden>
            <h3>Nevadí!</h3>
            <p class="explanation">
                {lesson.czech} se polsky řekne {lesson.polish}
            </p>
            <a role="button" title="další úloha" class="next" href={nextLink}
                >➡</a
            >
        </div>
    </footer>
</AppLayout>

<script>
    // @ts-ignore
    import { getCookie } from "../../util/cookies";

    document.addEventListener("astro:page-load", () => {
        const answer: HTMLInputElement = document.querySelector("#answer");
        const datae: HTMLDivElement = document.querySelector("#data");
        const inputArea: HTMLDivElement = document.querySelector("#input");
        let data;
        try {
            data = datae.dataset;
        } catch (err) {
            if (!location.search.includes("etitle"))
                location.search +=
                    "&etitle=" +
                    encodeURIComponent("Nepodařilo se načíst úlohu") +
                    "&edescription=" +
                    encodeURIComponent(err) +
                    "&eraw=" +
                    encodeURIComponent(err);
        }

        if (data) {
            if (answer) answer.focus();
            const help: HTMLInputElement = document.querySelector(".help");
            const idk: HTMLDivElement = document.querySelector("footer > .idk");
            const c: HTMLDivElement =
                document.querySelector("footer > .correct");
            const i: HTMLDivElement = document.querySelector(
                "footer > .incorrect",
            );

            if (data["nextImage"]) {
                console.log("Preloading next image...");
                const image = new Image();
                image.src = data["nextImage"];
                image.addEventListener("load", (ev) => {
                    console.log("Image succesfully preloaded!");
                });
            }

            if (data.type == 1) {
                answer.addEventListener("keyup", async (e) => {
                    if (e.key == "Enter") {
                        checkValue(answer.value);
                    } else if (answer.classList.contains("incorrect")) {
                        answer.classList.remove("incorrect");
                    }
                });
            } else if (data.type == 2) {
                const submit: HTMLInputElement =
                    document.querySelector(".submit");
                submit.addEventListener("click", () => {
                    const a = Object.values(
                        document.querySelectorAll(".answerbox"),
                    )
                        .map((answer: HTMLDivElement) =>
                            answer.innerText.trim().toLowerCase(),
                        )
                        .join(";");
                    checkValue(a);
                });
            }

            async function checkValue(value) {
                const request = await fetch(
                    `/api/v2/lesson/verify/${
                        data.id
                    }?polish=${encodeURIComponent(value)}`,
                    {
                        method: "POST",
                        headers: {
                            Authorization: `Bearer ${getCookie("token")}`,
                        },
                    },
                ).then((r) => r.json());

                if (request.success == true) {
                    c.hidden = false;
                    i.hidden = true;
                    idk.hidden = true;
                    if (answer) {
                        answer.disabled = true;
                    }
                    help.hidden = true;

                    speakAnswer();
                    document
                        .querySelectorAll(".next")
                        .forEach((btn: HTMLAnchorElement) => {
                            if (btn.checkVisibility()) {
                                btn.focus();
                            }
                        });

                    const explain: HTMLParagraphElement =
                        c.querySelector(".explanation");

                    explain.innerText = request.lesson.explanation;
                    if (answer) answer.value = request.lesson.polish;
                } else {
                    c.hidden = true;
                    i.hidden = false;
                    idk.hidden = true;
                    if (answer) answer.classList.add("incorrect");
                }
            }

            help.addEventListener("click", async (e) => {
                // left click
                if (e.button == 0) {
                    c.hidden = true;
                    i.hidden = true;
                    idk.hidden = false;

                    inputArea.setAttribute("disabled", "true");
                    speakAnswer();
                    document
                        .querySelectorAll(".next")
                        .forEach((btn: HTMLInputElement) => {
                            if (btn.checkVisibility()) {
                                btn.focus();
                            }
                        });
                }
            });

            const nopeidk = document.querySelector(".nopeidk");
            if (nopeidk && nopeidk instanceof HTMLAnchorElement) {
                nopeidk.addEventListener("click", async (e) => {
                    // left click
                    if (e.button == 0) {
                        c.hidden = true;
                        i.hidden = true;
                        idk.hidden = false;

                        inputArea.setAttribute("disabled", "true");
                        speakAnswer();
                        document
                            .querySelectorAll(".next")
                            .forEach((btn: HTMLInputElement) => {
                                if (btn.checkVisibility()) {
                                    btn.focus();
                                }
                            });
                    }
                });
            }

            let voice;
            function loadSpeechSynthesis() {
                let voices = window.speechSynthesis.getVoices();
                voice = voices.find((v) => v.lang == "pl-PL");
            }

            function speakAnswer() {
                if (voice && !speechSynthesis.speaking) {
                    const utterance = new SpeechSynthesisUtterance(data.polish);
                    utterance.voice = voice;
                    utterance.rate = 0.75;
                    speechSynthesis.speak(utterance);
                }
            }

            if (window.speechSynthesis) {
                if (speechSynthesis.onvoiceschanged !== undefined) {
                    speechSynthesis.onvoiceschanged = loadSpeechSynthesis;
                }

                loadSpeechSynthesis();
            }
        }

        document.querySelectorAll(".drag").forEach((el: HTMLDivElement) => {
            el.draggable = true;
            el.ondragstart = drag;

            // Phone dragging
            el.addEventListener("touchmove", function (e) {
                // assign box new coordinates based on the touch.
                el.style.left = e.touches[0].pageX - 40 + "px";
                el.style.top = e.touches[0].pageY - 40 + "px";
                el.style.position = "absolute";
                document.body.style.overflow = "hidden";
                document.body.style.height = "100%";
            });

            el.addEventListener("touchend", function (e) {
                const x = e.changedTouches[0].pageX + 40;
                const y = e.changedTouches[0].pageY + 40;

                const inDistance = (a, b, dist) => {
                    return Math.abs(a - b) < dist;
                };
                // go through drop spots
                const box = Object.values(
                    document.querySelectorAll(".answerbox"),
                ).find((dropzone) => {
                    const b = dropzone.getBoundingClientRect();

                    // Check if touch pos is somewhere in the area
                    const center = {
                        x: b.left - b.width / 2,
                        y: b.top - b.height / 2,
                    };

                    return (
                        inDistance(center.x, x, 200) &&
                        inDistance(center.y, y, 100) &&
                        dropzone != el.parentElement
                    );
                });

                el.style.position = "relative";
                el.style.left = "auto";
                el.style.top = "auto";
                document.body.style.height = "auto";
                document.body.style.overflow = "inherit";

                if (box) {
                    if (box.children.length != 0) {
                        const first = box.firstChild;
                        if (!el.parentElement) return;

                        box.removeChild(first);
                        el.parentElement.appendChild(first);
                    }
                    box.appendChild(el);
                }
            });
        });

        document
            .querySelectorAll(".answerbox")
            .forEach((el: HTMLDivElement) => {
                el.ondrop = (ev) => {
                    ev.preventDefault();

                    var data = ev.dataTransfer.getData("text");
                    var parent = ev.dataTransfer.getData("srcParent");
                    if (el.children.length != 0) {
                        const first = el.firstChild;
                        const parentE = document.getElementById(parent);
                        if (!parentE) return;
                        el.removeChild(first);
                        parentE.appendChild(first);
                    }
                    el.appendChild(document.getElementById(data));
                };
                el.ondragover = (ev) => {
                    ev.preventDefault();
                };
            });

        function drag(ev) {
            ev.dataTransfer.setData("text", ev.target.id);
            ev.dataTransfer.setData("srcParent", ev.target.parentElement.id);
        }
    });
</script>

<style>
    header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .task {
        font-size: 3rem;
    }

    .floating-segment {
        width: fit-content;
        padding: 0.3em;
        border: 1px solid;
        border-radius: 12px;
        font-size: larger;
        margin: 10px;
    }

    .container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        row-gap: 2em;
        margin: 2em;
        margin-top: 0em;
    }

    .answer {
        justify-content: end;
        width: 50%;
    }

    .answerbox {
        display: inline-block;
        min-width: 3em;
        min-height: 2em;
        border: 1px solid black;
        border-radius: 10px;
        margin: 10px;
    }

    .answerbox:empty::before {
        content: "překlad";
        padding: 10px;
    }

    .left {
        font-size: larger;
    }

    .flex {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding: 1em;
    }

    .drag {
        cursor: move;
        user-select: none;
    }

    main {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    footer {
        position: fixed;
        bottom: -10px;
        border-radius: 12px;
        width: 100%;
    }

    .idk {
        background-color: orangered;
    }

    .incorrect {
        background-color: red;
        color: white;
    }

    footer > div {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        flex-direction: column;
    }

    footer {
        z-index: 1;
    }

    .image {
        border-radius: 12px;
        max-width: 80vw;
        height: auto;
    }

    p {
        margin-top: 0px;
    }

    .next,
    .nopeidk {
        position: absolute;
        right: 10px;
        padding: 0.5em;
        font-size: larger;
        outline: none;
        border: none;
        background: none;
        cursor: pointer;
        text-decoration: none;
        color: inherit;
    }

    .help {
        padding: 0.5em;
        font-size: larger;
        outline: none;
        border: none;
        cursor: pointer;
        width: min-content;
        color: inherit;
        text-decoration: underline orangered;
    }

    .next:focus {
        font-weight: 1000;
    }

    .correct {
        background-color: greenyellow;
        color: black;
    }

    [hidden] {
        display: none !important;
    }

    [disabled] {
        filter: grayscale(1);
        pointer-events: none;
    }

    img {
        border-radius: 12px;
        max-width: 90vw;
    }

    .imageContainer {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .translate {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        padding: 1em;
    }

    .submit {
        border-radius: 12px;
        font-size: 3em;
    }

    /*
    Phone keyboard
    */
    @media (max-height: 600px) {
        .help {
            position: absolute;
            bottom: 2vh;
            z-index: 2;
            border: 1px solid;
            border-radius: 15px;
        }
    }
</style>
