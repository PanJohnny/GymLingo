---
import UserInfo from "../../components/UserInfo.astro";
import { getLessonsByGroup } from "../../database";
import Layout from "../../layouts/Layout.astro";
import {isValidToken} from "../../database"
import Header1 from "../../components/Header1.astro";

if (!Astro.cookies.has("token") || ! (await isValidToken(Astro.cookies.get("token").value)))
    return Astro.redirect("/me/auth/login");

const group = Astro.url.searchParams.get("g");
if (!group) {
    return Astro.redirect("/");
}

const lessons = await getLessonsByGroup(group);

if (lessons.length == 0) {
    return Astro.redirect("/?err=group+empty");
}
const first = lessons[0];

const firstImg = await (
    await fetch(Astro.url.origin + "/api/image?q=" + encodeURI(first.czech))
).text();

const lessonsDeleted = lessons.map((l) => {
    const newObject = { ...l };

    delete newObject.polish;

    return newObject;
});
---

<Layout title="Slovíčka | Procvičování" description="Procvičte si, jak se česká slova řeknou polsky">
    <header>
        <UserInfo />
        <h2 style="font-size: larger;">Slovíčka</h2>
        <Header1 />
    </header>
    <main
        data-lessons={btoa(encodeURIComponent(JSON.stringify(lessonsDeleted)))}
    >
        <h2 class="task">Přeložte slovo</h2>
        <div class="container">
            <div class="floating-segment translate" lang="cs-CZ">
                {first.czech}
            </div>
            <div>
                <input
                    type="text"
                    class="floating-segment answer"
                    lang="pl-PL"
                />
                <input type="button" value="❔" class="help" title="Nevím" />
            </div>
        </div>
        <img src={firstImg} alt={first.czech} class="image" />
    </main>
    <footer>
        <div class="correct" hidden>
            <h3>Správně</h3>
            <p class="explanation"></p>
            <input type="button" value="➡" class="next" />
        </div>

        <div class="incorrect" hidden>
            <h3>Špatně</h3>
            <p>Zkus to znovu, nebo kliknutím na otazník přeskoč otázku</p>
        </div>

        <div class="idk" hidden>
            <h3>Nevadí!</h3>
            <p class="explanation">Popdívejte se do slovíček</p>
            <input type="button" value="➡" class="next" />
        </div>
    </footer>
</Layout>

<script type="module" type="text/javascript">
import { getCookie } from "/cookies.js";

let data;
let index = 0;
try {
    data = JSON.parse(
        decodeURIComponent(
            atob(
                document.querySelector("main").getAttribute("data-lessons"),
            ),
        ),
    );
} catch (err) {
    location.href =
        "/?err=data+to+client+fail&raw=" + encodeURIComponent(err);
}

if (data) {
    const answer = document.querySelector(".answer");
    answer.focus();
    const help = document.querySelector(".help");
    const idk = document.querySelector("footer > .idk");
    const c = document.querySelector("footer > .correct");
    const i = document.querySelector("footer > .incorrect");

    answer.addEventListener("keyup", async (e) => {
        if (e.key == "Enter") {
            const request = await fetch(
                `/api/lesson/verify/${data[index].group}?id=${data[index].id
                }&polish=${encodeURIComponent(answer.value)}`,
                {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer ${getCookie(
                            "token",
                        )}`,
                    },
                },
            ).then(r => r.json());

            if (request.success == true) {
                c.hidden = false;
                i.hidden = true;
                idk.hidden = true;
                answer.classList.add("correct");
                help.hidden = true;

                speakAnswer();
                document.querySelectorAll(".next").forEach((btn) => {
                    if (btn.checkVisibility()) {
                        btn.focus();
                    }
                });

                c.querySelector(".explanation").innerText = request.lesson.explanation;
                answer.value = request.lesson.polish;
            } else {
                c.hidden = true;
                i.hidden = false;
                idk.hidden = true;
                answer.classList.add("incorrect");
            }
        } else if (answer.classList.contains("incorrect")) {
            answer.classList.remove("incorrect");
        }
    });

    document.querySelectorAll(".next").forEach((btn) => {
        if (!(btn instanceof HTMLInputElement)) return;
        btn.addEventListener("click", async (e) => {
            // left click
            if (e.button == 0) {
                index++;

                if (index >= data.length) {
                    location.href = "/dict/overview?group=" + data[0].group + "&completed"
                    return;
                }

                // reload stuff
                c.hidden = true;
                i.hidden = true;
                idk.hidden = true;

                answer.classList.remove("correct");
                answer.classList.remove("incorrect");
                const translate = document.querySelector(".translate");
                const img = document.querySelector(".image");

                help.hidden = false;

                translate.innerText = data[index].czech;
                document
                    .querySelectorAll(".explanation")
                    .forEach((explanation) => {
                        if (explanation instanceof HTMLParagraphElement)
                            explanation.innerText = data[index].explanation;
                    });
                answer.value = "";
                answer.disabled = false;
                img.src = await (
                    await fetch(
                        "/api/image?q=" + encodeURI(data[index].czech),
                    )
                ).text();
                setTimeout(() => answer.focus(), 100);
            }
        });
    });

    help.addEventListener("click", async (e) => {
        // left click
        if (e.button == 0) {
            c.hidden = true;
            i.hidden = true;
            idk.hidden = false;

            answer.disabled = true;
            speakAnswer();
            document.querySelectorAll(".next").forEach((btn) => {
                if (btn.checkVisibility()) {
                    btn.focus();
                }
            });
        }
    });

    let voice;
    function loadSpeechSynthesis() {
        let voices = window.speechSynthesis.getVoices();
        voice = voices.find((v) => v.lang == "pl-PL");
    }

    function speakAnswer() {
        if (voice && !speechSynthesis.speaking) {
            const utterance = new SpeechSynthesisUtterance(
                data[index].polish,
            );
            utterance.voice = voice;
            utterance.rate = 0.75;
            speechSynthesis.speak(utterance);
        }
    }

    if (window.speechSynthesis) {
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = loadSpeechSynthesis;
        }

        loadSpeechSynthesis();
    }
}
</script>

<style>
    header {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .task {
        font-size: 3rem;
    }

    .floating-segment {
        background-color: lightcyan;
        width: fit-content;
        padding: 0.3em;
        border: 1px solid black;
        border-radius: 12px;
        font-size: larger;
    }

    .container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        row-gap: 2em;
        margin: 2em;
        margin-top: 0em;
    }

    .answer {
        justify-content: end;
        width: 50%;
    }

    main {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }

    footer {
        position: fixed;
        bottom: -10px;
        border-radius: 12px;
        width: 100%;
    }

    .idk {
        background-color: orangered;
    }

    .incorrect {
        background-color: red;
        color: white;
    }

    footer > div {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        flex-direction: column;
    }

    footer {
        z-index: 1;
    }

    .image {
        border-radius: 12px;
        max-width: 80vw;
        height: auto;
    }

    p {
        margin-top: 0px;
    }

    .next {
        position: absolute;
        right: 10px;
        padding: 0.5em;
        font-size: larger;
        outline: none;
        border: none;
        background: none;
        cursor: pointer;
    }

    .help {
        padding: 0.5em;
        font-size: larger;
        outline: none;
        border: none;
        background: none;
        cursor: pointer;
        width: min-content;
    }

    .next:focus {
        font-weight: 1000;
    }

    .correct {
        background-color: greenyellow;
    }

    [hidden] {
        display: none !important;
    }

    [disabled] {
        filter: grayscale(1);
    }
</style>
